import type { Express, Request, Response, NextFunction } from "express";
import { storage } from "./storage";
import { aiService } from "./services/ai-service";
import { insertPromptSchema, insertCategorySchema } from "../shared/schema";
import { createClient } from "@supabase/supabase-js";
import { z } from "zod";

export function registerRoutes(app: Express): void {
  // Auth middleware for routes needing Supabase user
  async function requireAuth(req: Request, res: Response, next: NextFunction) {
    try {
      const auth = req.headers["authorization"] || req.headers["Authorization"];
      if (!auth || Array.isArray(auth)) return res.status(401).json({ message: "Unauthorized" });
      const token = (auth as string).startsWith("Bearer ") ? (auth as string).slice(7) : undefined;
      if (!token) return res.status(401).json({ message: "Unauthorized" });

      const SUPABASE_URL = process.env.SUPABASE_URL;
      const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY;
      if (!SUPABASE_URL || !SUPABASE_KEY) return res.status(500).json({ message: "Auth not configured" });
      const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
      const { data, error } = await supabase.auth.getUser(token);
      if (error || !data?.user) return res.status(401).json({ message: "Invalid token" });
      (req as any).userId = data.user.id;
      next();
    } catch (e) {
      res.status(401).json({ message: "Unauthorized" });
    }
  }
  // Health + diagnostics
  app.get("/api/health", async (_req, res) => {
    try {
      // import inside to avoid circulars
      const { storage } = await import("./storage");
      const usingSupabase = storage.constructor.name.toLowerCase().includes("supabase");
      let counts: any = {};
      try {
        const categories = await storage.getCategories();
        const prompts = await storage.getPrompts();
        counts = { categories: categories.length, prompts: prompts.length };
      } catch (e) {
        counts = { error: (e as Error).message };
      }
      res.json({
        ok: true,
        storage: usingSupabase ? "supabase" : "memory",
        env: {
          SUPABASE_URL: !!process.env.SUPABASE_URL,
          SUPABASE_SERVICE_ROLE_KEY: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
          VITE_SUPABASE_ANON_KEY: !!process.env.VITE_SUPABASE_ANON_KEY,
          VERCEL: !!process.env.VERCEL,
        },
        counts,
      });
    } catch (e) {
      res.status(500).json({ ok: false, error: (e as Error).message });
    }
  });
  // Categories routes
  app.get("/api/categories", async (req, res) => {
    try {
      const categories = await storage.getCategories();
      res.json(categories);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch categories" });
    }
  });

  app.post("/api/categories", async (req, res) => {
    try {
      const validatedData = insertCategorySchema.parse(req.body);
      const category = await storage.createCategory(validatedData);
      res.status(201).json(category);
    } catch (error) {
      if (error instanceof z.ZodError) {
        res.status(400).json({ message: "Invalid category data", errors: error.errors });
      } else {
        res.status(500).json({ message: "Failed to create category" });
      }
    }
  });

  // Prompts routes
  app.get("/api/prompts", async (req, res) => {
    try {
      const { category, search, featured } = req.query;
      
      let prompts;
      if (search) {
        prompts = await storage.searchPrompts(search as string);
      } else if (category) {
        prompts = await storage.getPromptsByCategory(category as string);
      } else if (featured === 'true') {
        prompts = await storage.getFeaturedPrompts();
      } else {
        prompts = await storage.getPrompts();
      }
      
      res.json(prompts);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch prompts" });
    }
  });

  app.get("/api/prompts/:id", async (req, res) => {
    try {
      const prompt = await storage.getPromptById(req.params.id);
      if (!prompt) {
        return res.status(404).json({ message: "Prompt not found" });
      }
      
      // Increment view count
      await storage.incrementPromptViews(req.params.id);
      
      res.json(prompt);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch prompt" });
    }
  });

  app.post("/api/prompts", async (req, res) => {
    try {
      const validatedData = insertPromptSchema.parse(req.body);
      const prompt = await storage.createPrompt(validatedData);
      res.status(201).json(prompt);
    } catch (error) {
      if (error instanceof z.ZodError) {
        res.status(400).json({ message: "Invalid prompt data", errors: error.errors });
      } else {
        res.status(500).json({ message: "Failed to create prompt" });
      }
    }
  });

  app.patch("/api/prompts/:id", async (req, res) => {
    try {
      const updates = insertPromptSchema.partial().parse(req.body);
      const prompt = await storage.updatePrompt(req.params.id, updates);
      
      if (!prompt) {
        return res.status(404).json({ message: "Prompt not found" });
      }
      
      res.json(prompt);
    } catch (error) {
      if (error instanceof z.ZodError) {
        res.status(400).json({ message: "Invalid prompt data", errors: error.errors });
      } else {
        res.status(500).json({ message: "Failed to update prompt" });
      }
    }
  });

  app.post("/api/prompts/:id/like", async (req, res) => {
    try {
      await storage.incrementPromptLikes(req.params.id);
      res.json({ message: "Prompt liked successfully" });
    } catch (error) {
      res.status(500).json({ message: "Failed to like prompt" });
    }
  });

  // AI generation routes
  app.post("/api/ai/generate-prompt", async (req, res) => {
    try {
      const schema = z.object({
        goal: z.string().min(1, "Goal is required"),
        category: z.string().optional(),
        audience: z.string().optional(),
        tone: z.string().optional(),
        additionalContext: z.string().optional()
      });

      const validatedData = schema.parse(req.body);
      const result = await aiService.generatePrompt(validatedData);
      res.json(result);
    } catch (error) {
      if (error instanceof z.ZodError) {
        res.status(400).json({ message: "Invalid request data", errors: error.errors });
      } else {
        res.status(500).json({ 
